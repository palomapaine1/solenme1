# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sMP9IaOK-30ABmZ2UP3v21j_hGlnJl2T
"""

import pandas as pd
import requests
import streamlit as st

# Función para obtener datos de una API
def obtener_datos_api(api_url):
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        return pd.DataFrame(data)
    else:
        st.error(f"Error al obtener los datos de la API: {response.status_code}")
        return None
# Página de interacción con los datos
def pagina_interaccion():
    api_url = "https://restcountries.com/v3.1/all"
    df = obtener_datos_api(api_url)
    
    if df is not None:
        st.title("Interacción con los Datos")
        st.write(df.head())

        # Manejar datos ausentes o nulos
        df['Nombre'] = df['name'].apply(lambda x: x.get('common') if isinstance(x, dict) else "Sin nombre")
        df['Región'] = df['region'].fillna("Sin región")
        df['Población'] = pd.to_numeric(df['population'], errors='coerce').fillna(0)
        df['Área (km²)'] = pd.to_numeric(df['area'], errors='coerce').fillna(0)
        df['Fronteras'] = df['borders'].apply(lambda x: len(x) if isinstance(x, list) else 0)
        df['Idiomas Oficiales'] = df['languages'].apply(lambda x: len(x) if isinstance(x, dict) else 0)
        df['Zonas Horarias'] = df['timezones'].apply(lambda x: len(x) if isinstance(x, list) else 0)
        
        # Asegurar que las columnas sean numéricas para estadísticas
        columnas_numericas = df_cleaned.select_dtypes(include=['number']).columns.tolist()
        
        # Filtro seguro para rangos
        min_val, max_val = st.slider(
            f"Selecciona el rango para {columna_filtro}:",
            float(df_cleaned[columna_filtro].min()),
            float(df_cleaned[columna_filtro].max()),
            (float(df_cleaned[columna_filtro].min()), float(df_cleaned[columna_filtro].max())))
