# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sMP9IaOK-30ABmZ2UP3v21j_hGlnJl2T
"""

import pandas as pd
import requests
import streamlit as st

# Título de la aplicación
st.title('Aplicación Web: Datos desde una API REST')
# Verificar que la respuesta sea exitosa (código 200)
df= pd.read_csv('database_titanic.csv')
st.write(df.head())
# Selección de columnas y estadísticas
# Verificar si las columnas existen antes de operar sobre ellas
if df is not None and not df.empty:
    # Manejo de columnas relevantes con verificaciones
    if 'name' in df.columns:
        df['Nombre'] = df['name'].apply(lambda x: x.get('common') if isinstance(x, dict) else None)
    else:
        df['Nombre'] = None
    
    if 'region' in df.columns:
        df['Región'] = df['region']
    else:
        df['Región'] = None

    if 'population' in df.columns:
        df['Población'] = df['population']
    else:
        df['Población'] = None

    if 'area' in df.columns:
        df['Área (km²)'] = df['area']
    else:
        df['Área (km²)'] = None

    if 'borders' in df.columns:
        df['Fronteras'] = df['borders'].apply(lambda x: len(x) if isinstance(x, list) else 0)
    else:
        df['Fronteras'] = 0

    if 'languages' in df.columns:
        df['Idiomas Oficiales'] = df['languages'].apply(lambda x: len(x) if isinstance(x, dict) else 0)
    else:
        df['Idiomas Oficiales'] = 0

    if 'timezones' in df.columns:
        df['Zonas Horarias'] = df['timezones'].apply(lambda x: len(x) if isinstance(x, list) else 0)
    else:
        df['Zonas Horarias'] = 0

    st.write("Transformación exitosa:", df.head())
else:
    st.error("El DataFrame está vacío o no es válido.")
    columnas = ['Nombre', 'Región', 'Población', 'Área (km²)', 'Fronteras', 'Idiomas Oficiales', 'Zonas Horarias']
    # Dataframe para trabajar
    df_cleaned = df[columnas]

    # Mostrar DataFrame con las columnas seleccionadas
    st.title("Interacción con los datos")
    st.header("Mostrar los datos originales")
    st.dataframe(df_cleaned)
    st.header("Selecciona una columna del dataframe utilizando un menú desplegable")
    columnas = st.multiselect('Selecciona las columnas a visualizar', df_cleaned.columns.tolist(), default=df_cleaned.columns.tolist())
    df_seleccionado = df_cleaned[columnas]
    # Mostrar el DataFrame con las columnas seleccionadas
    st.write('Columna Selecionada:')
    st.write(df_seleccionado)
    st.write("Estadísticas de las columnas seleccionadas:")
    st.write("Media:",)
    st.write(df_seleccionado.mean(numeric_only=True))
    st.write("Mediana:",)
    st.write(df_seleccionado.median(numeric_only=True))
    st.write("Desviación estándar:",)
    st.write(df_seleccionado.std(numeric_only=True))
    columna_ordenar = st.selectbox('Selecciona una columna para ordenar', df_seleccionado.columns)
    # Control para seleccionar el orden (ascendente o descendente)
    orden = st.radio('Selecciona el orden:', ('Ascendente', 'Descendente'))
    # Ordenar el DataFrame según la columna seleccionada y el orden elegido
    if orden == 'Ascendente':
        df_ordenado = df_seleccionado.sort_values(by=columna_ordenar, ascending=True)
    else:
        df_ordenado = df_seleccionado.sort_values(by=columna_ordenar, ascending=False)
        # Mostrar el DataFrame ordenado
    st.write('DataFrame Ordenado:')
    st.write(df_ordenado)
    st.subheader("Filtrar Datos")
    columna_filtro = st.selectbox("Selecciona una columna para filtrar:", df.select_dtypes(include=['number']).columns)
    if columna_filtro:
     min_val, max_val = st.slider(
        f"Selecciona el rango para {columna_filtro}:",
        float(df[columna_filtro].min()),
        float(df[columna_filtro].max()),
        (float(df[columna_filtro].min()), float(df[columna_filtro].max())))
    df_filtrado = df[(df[columna_filtro] >= min_val) & (df[columna_filtro] <= max_val)]
    st.write("**Datos Filtrados:**")
    st.write(df_filtrado)

    # Botón para descargar los datos filtrados
    st.subheader("Exportar Datos Filtrados")
    formato = st.radio("Elige el formato para descargar:", ('CSV', 'Excel'))

    @st.cache_data
    def convertir_a_csv(df):
        return df.to_csv(index=False).encode('utf-8')

    @st.cache_data
    def convertir_a_excel(df):
        import io
        buffer = io.BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='DatosFiltrados')
            writer.save()
        return buffer.getvalue()

    if formato == 'CSV':
        st.download_button(
            label="Descargar en CSV",
            data=convertir_a_csv(df_filtrado),
            file_name='datos_filtrados.csv',
            mime='text/csv')
    else:
        st.download_button(
            label="Descargar en Excel",
            data=convertir_a_excel(df_filtrado),
            file_name='datos_filtrados.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    # Título de la aplicación
st.title("Gráficos Interactivos con Streamlit")

# Cargar archivo o usar ejemplo
st.subheader("Carga de Datos")
uploaded_file = st.file_uploader("Sube un archivo CSV o Excel:", type=["csv", "xlsx"])

if uploaded_file:
    try:
        # Detectar formato y cargar archivo
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.xlsx'):
            df = pd.read_excel(uploaded_file)
        st.success("Archivo cargado exitosamente.")
    except Exception as e:
        st.error(f"Error al cargar el archivo: {e}")
        df = pd.DataFrame()
else:



 
